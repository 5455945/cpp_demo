// 4 C++代码整洁的基本规范
// 4.1 良好的命名
// 4.1.1 名称应该自解释
// 4.1.2 使用域中的名称
// 4.1.3 选择适当抽象的名称
// 4.1.4 避免冗余的名称
// 4.1.5 避免晦涩难懂的缩写
// 4.1.6 避免匈牙利命名和命名前缀
// 4.1.7 避免相同的名称用于不同的目的
// 4.2 注释
// 4.2.1 让写代码像讲故事一样
// 4.2.2 不要为易懂的代码写注释
// 4.2.4 不要写块注释
// 4.2.5 特殊情况的注释是有用的
// 4.3 函数
// 4.3.1 只做一件事
// 4.3.2 让函数尽可能小
// 4.3.3 函数命名
// 4.3.4 使用容易理解的名称
// 4.3.5 函数的参数和返回值
// 参数的个数 0， 1， 2
// 避免使用标志参数
// 避免使用输出参数
// 不要传递或返回0(NULL,nullptr)
// 一些避免使用指针的策略：
//    在栈上创建对象，
//    在函数的参数列表中，用const引用代替指针
//    如果不可避免地处理指向资源的指针，请使用智能指针
//    如果API返回原始指针
// 正确的使用const
// 4.4 C++工程中的C风格代码
// 4.4.1 使用C++的string和stream替代C风格的char*
// 4.4.2 避免使用printf(),sprintf(),gets()等
// 4.4.3 使用标准库容器而不是C风格数组
// 4.4.4 用C++类型转换代替C风格的强制类型转换
//    1.在任何情况下尽量避免类型转换(强制转换)
//    2.仅使用C++风格的类型转换(static_cast<>或const_cast<>)
//    3.不要使用dynamic_cast<>，它是一个糟糕的设计
//    4.在任何情况下，永远不要使用reinterpret_cast<>,它打上了不安全、不可移植、依赖于实现等标记。
// 4.5 避免使用宏
// 考虑用constexpr和模板代替
