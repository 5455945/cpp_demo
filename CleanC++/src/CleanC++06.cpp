// 6 面向对象
// 6.1 面向对象思想
// 6.2 抽象--解决复杂问题的关键因素
// 6.3 类的设计原则
// 6.3.1 让类尽可能小
// 6.3.2 单一职责原则(SRP)
// 单一职责原则规定，每个软件单元，其中包括组件、类和函数，应该只有一个单一且明确定义的职责。
// 6.3.3 开闭原则(OCP):多扩张开放，对修改封闭
// 所有的系统在其生命周期内部会发生变换。在开放预期比第一个版本持续时间更长的系统时，必须记住这一点。
// 6.3.4 里氏替换原则(LSP)
// 你不能通过给一条狗增加4条假腿来创造一只章鱼。
// 正方形是一种特殊的矩形，如果正方形继承自矩形，就破坏了里氏替换原则
// 使用基类指针或基类引用的函数，必须在不知道派生类的情况下使用它。
// 运行时类型信息(RTTI)
// 使用组合而不是继承
// Squre和Rectangle平级；并且Squre委托Rectangle的实例来实现，达到不违背避免复制(DRY)原则。
// 6.3.5 接口隔离原则(LSP)
// 6.3.6 无环依赖原则
// 6.3.7 依赖倒置原则(DIP)
// 6.3.8 不要和陌生人说话(迪米特法则:Demeter)
// 6.3.9 避免“贫血类”:只有数据，没有操作的类
// 6.3.10 只说不问
//  增强类的封装，增强信息隐蔽，不用getter方法
// 6.3.11 避免类的静态成员
