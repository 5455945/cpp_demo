// 8 测试驱动开发
// 8.1 普通的旧单元测试的缺点
// 8.2 测试驱动开发作为颠覆者
// 8.2.1 TDD的流程
// 8.2.2 TDD的一个小例子:Code Kata
// 8.3 TDD的优势
// 如果遵循TDD的思想，在开发时就会逐步完成你的需求。
// TDD建立了一个非常快速的反馈循环。
// 先编写单元测试有助于开发人员思考接下来应该做什么。
// 在TDD的帮助下，无间隙的规范以可执行代码的形式出现。
// 开发人员能够更加自觉和负责任地处理依赖关系。
// 通常情况下，利用TDD开发的新产品代码将具有100%的单元测试覆盖率。
// 8.4 什么时候不应该使用TDD
// 非常简单，粒度小，不复杂的部分，没必要使用TDD
// TDD不能取代对软件系统的粗粒度结构的必要抉择。系统架构级不适合用TDD。比如：框架、库、技术或架构模式